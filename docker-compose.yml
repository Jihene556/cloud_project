services:
  redis:
    image: "redis:alpine"
    container_name: redis
    volumes:
      - ./healthchecks:/healthchecks
    healthcheck:
      test: ["CMD", "sh", "/healthchecks/redis.sh"]
      interval: 5s
      timeout: 5s
      retries: 2
    ports:
      - "6379:6379"

  db:
    image: postgres:15-alpine
    container_name: db
    environment:
      POSTGRES_USER: postgres # used in result/server.js
      POSTGRES_PASSWORD: postgres # same
      POSTGRES_DB: postgres # same
    volumes:
      - db-data:/var/lib/postgresql/data  # Persistent database storage
      - ./healthchecks:/healthchecks      # Health check scripts
    healthcheck:
      test: ["CMD", "sh", "/healthchecks/postgres.sh"]
      interval: 5s
      timeout: 5s
      retries: 2
    ports:
      - "5432:5432"

  vote1:
      build: ./vote  # Construire l'image à partir du Dockerfile dans ./vote
      container_name: vote1
      depends_on:
        - redis
          #condition: service_healthy
      environment:
        - REDIS_HOST=redis
        - REDIS_PORT=6379
      ports:
      - "5000:5000"

  vote2:
    build: ./vote  # Construire l'image à partir du Dockerfile dans ./vote
    container_name: vote2
    depends_on:
      - redis
        #condition: service_healthy
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
    - "5001:5000"

  nginx:
    build: ./nginx
    container_name: nginx
    depends_on:
      - vote1
      - vote2
    ports:
    - "80:80"

  worker:
    build: ./worker
    container_name: worker
    depends_on:
      - redis
      - db
    ports:
    - "8000:8000"


volumes:
  db-data: 

